public class Sorts {
   
   /**
    * 功能:冒泡排序
    * @param a:数组
    */性质：1、时间复杂度：O(n2)  2、空间复杂度：O(1)  3、稳定排序  4、原地排序
    public static int[] bubbleSort(int[] a){
        if(a.length<=1 || a==null)return a;
        for(int i=0;i<a.length-1;i++){
            for(int j=0;j<a.length-1-i;j++){
                if(a[j]>a[j+1]){
                    int temp=a[j];
                    a[j]=a[j+1];
                    a[j+1]=temp;
                }

            }
        }
        return a;
    }
    //冒泡算法的优化：假如从开始的第一对到结尾的最后一对，相邻的元素之间都没有发生交换的操作，
    //这意味着右边的元素总是大于等于左边的元素，此时的数组已经是有序的了，我们无需再对剩余的元素重复比较下去了。
     public int[] bubbleSort2(int[] arr) {
        if (arr == null || arr.length < 2) {
            return arr;
        }
        for (int i = 0; i < arr.length-1; i++) {
            boolean flag = true;
            for (int j = 0; j < a.length - i - 1; j++) {
                if (arr[j + 1] < arr[j]) {
                    flag = false;
                    int t = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = t;
                }
            }
            //一趟下来是否发生位置交换
            if (flag)
                break;
        }
        return arr;
    }

   /**
    * 功能:插入排序
    * 算法思路:取出未排序区间的数据放到value变量中，与已排序区间的数据倒序一一比较，如果要插入的数据比value大
    * 就放到该数据的后方（也就是i的位置，我们用j+1替换（j+1=i））,前边是与排序区间的最后一个数据比较，如果我们value
    * 比最后一个比较的数据要小，我们要把被比较的数据向后移动一位（a[j+1] = a[j]），指针 j 向前移动，指向下一个被比较的数据，
    * 如果满足条件，则插入到给数据的前方。
    * @param a:数组
    */性质：1、时间复杂度：O(n2)  2、空间复杂度：O(1)  3、稳定排序  4、原地排序
   public static int[] insertSort(int[] a){
        if(a.length<=1 || a==null){
            return a;
        }
        for(int i=1;i<a.length;i++){
           int j=i-1;
           int temp=a[i];
           while(j>=0&&a[j]>a[j+1]){
               a[j]=a[j+1];
               j--;
           }
           a[j+1]=temp;
        }
        return a;
    }
}
