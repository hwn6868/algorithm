public class BinarySearchTree<AnyType extends Comparable<? super AnyType>> {
    
    private class BinaryNode<AnyType>{//定义二叉查找树的节点
        AnyType element;
        BinaryNode<AnyType> left;
        BinaryNode<AnyType> right;
        
        BinaryNode(AnyType element){
            this(element,null,null);
        }
        BinaryNode(AnyType element,BinaryNode<AnyType> left,BinaryNode<AnyType> right){
            this.element=element;
            this.left=left;
            this.right=right;
        }
    }
    private BinaryNode<AnyType> root;
    
    public BinarySearchTree(){
        root=null;
    }
    public void makeEmpty(){
        root=null;
    }
    public boolean isEmpty(){
        return root==null;
    }
    
    //查找某一结点，t为root节点
    public boolean contain(AnyType x,BinaryNode<AnyType> t){
        if(t==null)return false;
        int compareResult=x.compareTo(t.element);
        if(compareResult<0){
            return contain(x,t.left);
        }else if(compareResult>0){
            return contain(x,t.right);
        }else {
            return true;
        }
    }
    
    //查找最小节点,利用递归
    public AnyType findMin(BinaryNode<AnyType> t){
        if(t==null)return null;
        if(t.left!=null){//左儿子不为空就一直递归
            return findMin(t.left);
        }else {
            return t.element;
        }
    }

    //查找最大节点,利用递归
    public AnyType findMax(BinaryNode<AnyType> t){
        if(t==null)return null;
        if(t.right!=null){//右儿子不为空就一直递归
            return findMax(t.left);
        }else {
            return t.element;
        }
    }
    
    //插入某一节点到二叉查找树
    public BinaryNode<AnyType> insert(AnyType x,BinaryNode<AnyType> t){
        if(t==null)return new BinaryNode<>(x,null,null);
        int compareResult=x.compareTo(t.element);
        if(compareResult<0){
            t.left=insert(x,t.left);
        }
        else if(compareResult>0){
            t.right=insert(x,t.right);
        }
        else ;
        return t;
    }
    
    //删除某一节点,这个比较难
    public BinaryNode<AnyType> remove(AnyType x,BinaryNode<AnyType> t){
        if(t==null)return t;
        int compareResult=x.compareTo(t.element);
        if(compareResult<0){
            t.left=remove(x,t.left);
        }else if(compareResult>0){
            t.right=remove(x,t.right);
        }else if(t.left!=null&&t.right!=null){
            t.element=findMin(t.right);
            t.right=remove(t.element,t.right);
        }else {
            t=(t.left!=null)?t.left:t.right;
        }
        return t;
    }
    //先序遍历树的节点,t初始值为root节点
    public void xxbl(BinaryNode<AnyType> t){
        if(t!=null){
            System.out.println(t.element);
            xxbl(t.left);
            xxbl(t.right);
        }
    }
    //中序遍历树的节点
    public void zxbl(BinaryNode<AnyType> t){
        if(t!=null){
            xxbl(t.left);
            System.out.println(t.element);
            xxbl(t.right);
        }
    }
    //后序遍历树的节点
    public void hxbl(BinaryNode<AnyType> t){
        if(t!=null){
            xxbl(t.left);
            xxbl(t.right);
            System.out.println(t.element);
        }
    }
}
