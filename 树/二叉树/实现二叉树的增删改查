public class BinarySearchTree {
	
	public static void main(String[] args) {
		BinarySearchTree b = new BinarySearchTree();
		//插入数据
		b.insert(13);
		b.insert(8);
		b.insert(18);
		b.insert(6);
		b.insert(10);
		b.insert(16);
		b.insert(20);
		
		//前序遍历数据
		b.inorderTraversal(tree);
		
		System.out.println(" ");
		//查找数据
		System.out.println("查找数据:" + b.find(16));
		//求最大值
		System.out.println("树中的最大值为:"+b.findMax().data);
		//求最小值
		System.out.println("树中的最小值为:"+b.findMin().data);
		//删除数据
		System.out.println("删除数据:"+20);
		b.delete(20);
		b.inorderTraversal(tree);
	}
	
	//声明一课树
	private static Node tree;
	
	//声明树节点
	public class Node{
		//树节点的数据域
		private int data;
		//左子树
		private Node left;
		//右子树
		private Node right;
		
		public Node(int data) {
			this.data = data;
		}
	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:查找数据
	 * @param value 查找的数据
	 * @return 返回节点
	 */
	public Node find(int value) {
		//遍历查找树节点
		Node p = tree;
		while(p != null) {
			//如果查找的数据大于根节点,左子树遍历
			if(p.data > value) {
				p = p.left;
			//否则，右子树遍历
			}else if(p.data < value) {
				p = p.right;
			//找到直接返回该节点
			}else {
				return p;
			}
		}
		return null;
	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:插入数据
	 * 边界条件:
	 * 1、如果根节点为空,添加第一个节点
	 * 2、
	 * @param value 插入的数据
	 * @return 
	 */
	public Boolean insert(int value) {
		//如果树为空,新添加一个根节点
		if(tree == null) {
			tree = new Node(value);
			return true;
		}
		
		//否则，遍历树
		Node p = tree;
		while(p != null) {
			//判断是否大于根节点
			if(value > p.data) {
				//判断右子树是否为空
				if(p.right == null) {
					//添加右子树节点
					p.right = new Node(value);
					return true;
				}
				//如果不为空,则继续遍历右子树
				p = p.right;
			}else {
				//判断左子树是否为空
				if(p.left == null) {
					//添加左子树节点
					p.left = new Node(value);
					return true;
				}
				//如果不为空,则继续遍历左子树
				p = p.left;
			}
		}
		return false;
	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:删除节点
	 * 情况分析:
	 * 1、只有根节点,删除根节点
	 * 2、删除的节点无子节点或者只有一个节点
	 * 3、删除的节点有两个子节点(找到右子树最小值,替换最小值进行删除)
	 * @param data 要删除的数据
	 */
	public void delete(int value) {
		//指向删除的节点
		//a1
		Node p = tree;
		//记录 p 的父节点20,默认为 null
		//a1
		Node pp = null;
		
		//先寻找该数据的结点(根节点为删除节点)
		while(p != null && p.data != value) {
			//记录删除节点的父节点
			pp = p;
			if(value > p.data) {
				p = p.right;
			}else {
				p = p.left;
			}
		}
		
		//如果树为空树,直接返回
		if(p == null) return;
		
		//情况一:删除的节点有两个子节点
		if(p.left != null && p.right != null) {
			//查找右子树中最小的节点
			//在右子树没有子节点时,默认右子树为最小节点
			Node minP = p.right;
			//右子树的父节点就是 p
			Node minPP = p;
			//判断右子树是否有左子节点(左子节点小于根节点,最小值存在左子树中)
			while(minP.left != null) {
				//如果有子节点,最小值等于父节点
				minPP = minP;
				//最小节点变为,上一节点的左子树
				minP = minP.left;
			}
			//最小数与删除数据替换
			p.data = minP.data;
			//p 指向删除的结点
			p = minP;
			//父节点赋值给删除节点的父节点
			pp = minPP;
		}
		
		//准备对上边节点进行删除
		//情况二:删除的节点是叶子节点或者仅有一个节点
		Node child;// 记录 p 的子节点
		if(p.left != null) {
			child = p.left;
		}else if(p.right != null) {
			child = p.right;
		}else {
			//删除节点无节点的情况
			//a1
			child = null;
		}
		
		//根节点为删除节点,删除根节点
		if(pp == null) {
			//a1
			tree = child;
		}else if(pp.left == p) {
			pp.left = child;
		}else {
			pp.right = child;
		}
	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:寻找最大节点
	 */
	public Node findMax() {
		//如果树为空树,直接返回
		if(tree == null) return null;
		//否则遍历右子树寻找最大点
		Node p = tree;
		while(p.right != null) {
			p = p.right;
		}
		return p;
	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:寻找最小节点
	 */
	public Node findMin() {
		if(tree == null) return null;
		//否则遍历左子树寻找最大点
		Node p = tree;
		while(p.left != null) {
			p = p.left;
		}
		return p;
	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:前序遍历
	 * @param root 树的根节点
	 */
	public void preorderTraversal(Node root) {
		//如果树为空
		if(root == null) return;
		//根节点
		System.out.print(root.data + " ");
		//左子树
		inorderTraversal(root.left);
		//右子树
		inorderTraversal(root.right);

	}	
	
	/**
	 * 时间:2019/2/24
	 * 功能:中序遍历
	 * @param root 树的根节点
	 */
	public void inorderTraversal(Node root) {
		//如果树为空
		if(root == null) return;
		//左子树
		inorderTraversal(root.left);
		//根节点
		System.out.print(root.data + " ");
		//右子树
		inorderTraversal(root.right);

	}
	
	/**
	 * 时间:2019/2/24
	 * 功能:后序遍历
	 * @param root 树的根节点
	 */
	public void postorderTraversal(Node root) {
		//如果树为空
		if(root == null) return;
		//左子树
		inorderTraversal(root.left);
		//右子树
		inorderTraversal(root.right);
		//根节点
		System.out.print(root.data + " ");

	}
}
