1.树的深度：它的最深的树叶的深度，也等于这棵树的高度；某一节点n的深度为从根节点到该节点n的唯一路径的长度。
2.树的高度：从根节点到一片树叶的最长路径的长度。
3.二叉查找树：对于树中的每个节点X，它的左子树中所有节点的值都小于X，它的右子树所有节点的值都大于X，所以二叉查找树要求所有节点都可以排序。
  平均深度为O(logN),时间性能也为O(logN)。

4.AVL树（平衡二叉查找树）：每一个节点的左右子树高度最多差1的二叉查找树。
5.B树（平衡多叉查找树）：B树就是一种平衡的多路查找树。
B-树中所有结点中孩子结点个数的最大值成为B-树的阶，通常用m表示，从查找效率考虑，一般要求m>=3。一棵m阶B-树或者是一棵空树，或者是满足以下条件的m叉树。

1）每个结点最多有m个分支（子树）；而最少分支数要看是否为根结点，如果是根结点且不是叶子结点，则至少要有两个分支，
  非根非叶结点至少有ceil(m/2)个分支，这里ceil代表向上取整。

2）如果一个结点有n-1个关键字，那么该结点有n个分支。这n-1个关键字按照递增顺序排列。

3）每个节点的结构为

节点个数：n；

关键字数组： k[n]，这n个关键字按照递增顺序排列

孩子指针数组：p[n + 1], p0<=k1, 之后所有 ki < pi <= ki+1;

